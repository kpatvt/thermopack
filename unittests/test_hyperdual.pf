module test_hyperdual
  use funit
  use hyperdual_mod
  use hyperdual_utility
  implicit none
  public

  abstract interface
    function hyperdual_fun(x) result(f)
      use hyperdual_mod
      type(hyperdual), intent(in) :: x
      type(hyperdual) :: f
    end function hyperdual_fun
  end interface

contains

  subroutine test_function(func, x0)
    procedure(hyperdual_fun) :: func
    real, intent(in) :: x0
    ! Locals
    real :: f_x, f_xx, f_xxx
    type(hyperdual) :: x, fun, fun1, fun2, fun3, fun4
    real :: dx
    x = x0
    x%order = 3
    x%f1 = 1
    x%f2 = 1
    x%f3 = 1
    fun = func(x)
    x%order = 0
    x%f1 = 0
    x%f2 = 0
    x%f3 = 0

    ! Finite difference
    dx = 5e-4*x0
    x = x0 - dx
    fun1 = func(x)
    x = x0 + dx
    fun2 = func(x)
    x = x0 - 2*dx
    fun3 = func(x)
    x = x0 + 2*dx
    fun4 = func(x)
    f_x = (fun2%f0 - fun1%f0)/(2*dx)
    f_xx = (fun2%f0 + fun1%f0 - 2*fun%f0)/dx**2
    f_xxx = (fun4%f0 - fun3%f0 + 2*fun1%f0 - 2*fun2%f0)/(2*dx**3)

    @assertTrue(abs(f_x - fun%f1)/max(1.0,abs(fun%f1)) < 1.0e-7)
    @assertTrue(abs(f_x - fun%f2)/max(1.0,abs(fun%f2)) < 1.0e-7)
    @assertTrue(abs(f_x - fun%f3)/max(1.0,abs(fun%f3)) < 1.0e-7)
    @assertTrue(abs(f_xx - fun%f12)/max(1.0,abs(fun%f12)) < 1.0e-6)
    @assertTrue(abs(f_xx - fun%f13)/max(1.0,abs(fun%f13)) < 1.0e-6)
    @assertTrue(abs(f_xx - fun%f23)/max(1.0,abs(fun%f23)) < 1.0e-6)
    @assertTrue(abs(f_xxx - fun%f123)/max(1.0,abs(fun%f123)) < 1.0e-4)
  end subroutine test_function

  function fun_log(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = log(x)
  end function fun_log

  @Test
  subroutine test_log
    call test_function(fun_log, x0=0.5)
  end subroutine test_log

  function fun_exp(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = exp(x)
  end function fun_exp

  @Test
  subroutine test_exp
    call test_function(fun_exp, x0=0.5)
  end subroutine test_exp

  function fun_sin(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = sin(x)
  end function fun_sin

  @Test
  subroutine test_sin
    call test_function(fun_sin, x0=0.5)
  end subroutine test_sin

  function fun_cos(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = cos(x)
  end function fun_cos

  @Test
  subroutine test_cos
    call test_function(fun_cos, x0=0.5)
  end subroutine test_cos

  function fun_tan(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = tan(x)
  end function fun_tan

  @Test
  subroutine test_tan
    call test_function(fun_tan, x0=0.5)
  end subroutine test_tan

  function fun_asin(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = asin(x)
  end function fun_asin

  @Test
  subroutine test_asin
    call test_function(fun_asin, x0=0.5)
  end subroutine test_asin

  function fun_acos(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = acos(x)
  end function fun_acos

  @Test
  subroutine test_acos
    call test_function(fun_acos, x0=0.5)
  end subroutine test_acos

  function fun_atan(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = atan(x)
  end function fun_atan

  @Test
  subroutine test_atan
    call test_function(fun_atan, x0=0.5)
  end subroutine test_atan

  function fun_multiply(x) result(f)
    implicit none
    type(hyperdual), intent(in) :: x
    type(hyperdual) :: f
    f = log(x)*exp(x)
  end function fun_multiply

  @Test
  subroutine test_multiply
    call test_function(fun_multiply, x0=0.5)
  end subroutine test_multiply

end module test_hyperdual
